<?php

/**
 * @file
 * Contains gdx_analytics_drupal_snowplow.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;

// Define constants for route names.
define('GDX_ANALYTICS_SETTINGS_FORM_ROUTE', 'gdx_analytics_drupal_snowplow.gdx_analytics_drupal_snowplow_settings_form');
define('GDX_ANALYTICS_HELP_PAGE_ROUTE', 'help.page.gdx_analytics_drupal_snowplow');

// Define constant for tracker versions.
define('GDX_ANALYTICS_WEBTRACKER', 'gdx_analytics_drupal_snowplow/gdx_analytics_drupal_snowplow.webtracker');
define('GDX_ANALYTICS_WEBTRACKER_WITH_SEARCH', 'gdx_analytics_drupal_snowplow/gdx_analytics_drupal_snowplow.webtracker_search');

// Define constant for configuration name.
define('GDX_ANALYTICS_CONFIG_NAME', 'gdx_analytics_drupal_snowplow.settings');

// Define constant for warning message about incomplete configuration.
define('GDX_ANALYTICS_WARNING_CONFIG', t('Please Configure Your GDX Analytics Drupal Snowplow Module.<br>For assistance with filling out this form, contact the GDX Analytics Team.'));

// Define constant for warning message about configuring the module.
define('GDX_ANALYTICS_WARNING_CONFIG_LINK', 'Please click here to configure your GDX Analytics Drupal Snowplow module.');

// Define constant for the module description.
define('GDX_ANALYTICS_MODULE_DESCRIPTION', t('This is the GDX Analytics Drupal Snowplow module.'));

/**
 * Implements hook_help().
 */
function gdx_analytics_drupal_snowplow_help($route_name) {
  // Help text for the module. $route_name is as part of Drupal routing system.
  if ($route_name === GDX_ANALYTICS_HELP_PAGE_ROUTE) {
    return '<h3>' . t('About') . '</h3><p>' . GDX_ANALYTICS_MODULE_DESCRIPTION . '</p>';
  }
}

/**
 * Implements hook_page_attachments().
 */
function gdx_analytics_drupal_snowplow_page_attachments(array &$page) {
  // Initialize variables.
  $admin_context = \Drupal::service('router.admin_context');
  $messenger = \Drupal::messenger();
  $logger = \Drupal::logger('gdx_analytics_drupal_snowplow');

  // Check if the current route is an administrative route.
  if ($admin_context->isAdminRoute()) {
    // Handle administrative routes.
    gdx_analytics_drupal_snowplow_handle_admin_routes($logger, $messenger);
  }
  else {
    // Handle non-administrative routes.
    gdx_analytics_drupal_snowplow_handle_non_admin_routes($page, $logger);
  }
}

/**
 * Handle logic for administrative routes.
 */
function gdx_analytics_drupal_snowplow_handle_admin_routes($logger, $messenger) {
  // Create link for configuration.
  $link = Link::fromTextAndUrl(GDX_ANALYTICS_WARNING_CONFIG_LINK, Url::fromRoute(GDX_ANALYTICS_SETTINGS_FORM_ROUTE));

  // Check if configuration is incomplete and display appropriate message.
  if (gdx_analytics_drupal_snowplow_is_configuration_incomplete($logger, $messenger)) {
    if ($route_name === GDX_ANALYTICS_SETTINGS_FORM_ROUTE) {
      $messenger->addWarning(GDX_ANALYTICS_WARNING_CONFIG);
    }
    else {
      $messenger->addWarning($link);
    }
  }
}

/**
 * Handle logic for non-administrative routes.
 */
function gdx_analytics_drupal_snowplow_handle_non_admin_routes(&$page, $logger) {
  try {

    // Get configuration settings.
    $settings = \Drupal::config(GDX_ANALYTICS_CONFIG_NAME)->getRawData();

    // Set collector, script uri, app_id, snowplow_version and search path.
    $page['#attached']['drupalSettings'] = [
      'gdx_collector' => $settings['gdx_collector_mode'],
      'app_id' => $settings['gdx_analytics_app_id'],
      'snowplow_version' => $settings['gdx_analytics_snowplow_version'],
      'search_path' => $settings['gdx_analytics_search_path'],
    ];

    // Attach the main tracking code url.
    $page['#attached']['drupalSettings']['script_uri'] = $settings['gdx_analytics_snowplow_script_uri'];

    // Handle version-specific logic.
    if ($settings['gdx_analytics_snowplow_version'] == 1) {
      // Handle Web tracker WITH search function.
      gdx_analytics_drupal_snowplow_handle_tracker_with_search($page, $settings);
    }
    elseif ($settings['gdx_analytics_snowplow_version'] == 0) {
      // Handle Web tracker WITHOUT search function.
      $page['#attached']['library'][] = GDX_ANALYTICS_WEBTRACKER;
    }

  }
  catch (\Exception $e) {
    // Log the exception and display a message.
    $logger->error('Error processing non-admin routes: @message', ['@message' => $e->getMessage()]);
  }
}

/**
 * Handle Web tracker WITH search function.
 */
function gdx_analytics_drupal_snowplow_handle_tracker_with_search(&$page, $settings) {
  // Check if the URI contains the search path (default path is '/search' for Drupal Standard Search).
  $curr_uri = \Drupal::request()->getRequestUri();

  if (strpos($curr_uri, $settings['gdx_analytics_search_path']) !== FALSE) {
    // Retrieve the search query parameters (first value of an array) key value pairs passed to the current script via the URL parameters.
    $query = \Drupal::request()->query->all();
    $search_terms = reset($query);
    if (!empty($search_terms)) {
      $page['#attached']['drupalSettings']['search'] = TRUE;
      // Assign the array of individual search terms (spaces as delimiters).
      $page['#attached']['drupalSettings']['search_terms'] = explode(' ', $search_terms);
    }
  }
  // Attach the tracking code to front-end pages if search toggle is enabled.
  $page['#attached']['library'][] = GDX_ANALYTICS_WEBTRACKER_WITH_SEARCH;
}

/**
 * Check if configuration settings are incomplete.
 */
function gdx_analytics_drupal_snowplow_is_configuration_incomplete($logger, $messenger) {
  try {

    // Get configuration settings.
    $config = \Drupal::config(GDX_ANALYTICS_CONFIG_NAME);
    // Retrieve raw data.
    $settings = $config->getRawData();

    // Check if any setting is empty.
    return in_array('', $settings);
  }
  catch (\Exception $e) {
    // Log the exception and display a message.
    $logger->error('Error retrieving configuration: @message', ['@message' => $e->getMessage()]);
    $messenger->addError(t('An error occurred while processing the configuration.'));
    return FALSE;
  }
}
